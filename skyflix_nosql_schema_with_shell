// Connect to MongoDB
mongosh

// Create and use database
use skyflix_app

// 1. Users Collection
// Drop if exists
db.users.drop()

// Create users collection and insert data
db.users.insertMany([
  {
    _id: ObjectId(),
    username: "fahryan",
    email: "fahryan@gmail.com",
    password: "hashed_password",
    fullName: "Fahryan Akbar Rizqy Santoso",
    dateOfBirth: ISODate("1990-05-15"),
    country: "ID",
    createdAt: ISODate("2024-10-15T12:47:31Z"),
    preferences: [
      {
        genreId: ObjectId(),
        actorId: ObjectId(),
        preferenceScore: 0.9
      }
    ],
    paymentInfo: {
      cardType: "VISA",
      cardNumber: "4111111111111111",
      expirationDate: ISODate("2025-12-31")
    },
    subscription: {
      status: "active",
      startDate: ISODate("2023-01-01"),
      endDate: ISODate("2024-01-01")
    }
  },
  {
    _id: ObjectId(),
    username: "hanfik",
    email: "hanfik@gmail.com",
    password: "hashed_password",
    fullName: "Rayhan Syaputra Fikri",
    dateOfBirth: ISODate("1988-09-22"),
    country: "ID",
    createdAt: ISODate("2024-10-15T12:47:31Z"),
    preferences: [
      {
        genreId: ObjectId(),
        actorId: ObjectId(),
        preferenceScore: 0.8
      }
    ],
    paymentInfo: {
      cardType: "MasterCard",
      cardNumber: "5555555555554444",
      expirationDate: ISODate("2024-10-31")
    },
    subscription: {
      status: "active",
      startDate: ISODate("2023-02-15"),
      endDate: ISODate("2024-02-15")
    }
  }
])

// 2. Actors Collection
// Drop if exists
db.actors.drop()

// Create actors collection and insert data
db.actors.insertMany([
  {
    _id: ObjectId(),
    firstName: "Tom",
    lastName: "Hanks",
    dateOfBirth: ISODate("1956-07-09"),
    nationality: "American",
    biography: "Award-winning actor known for various roles",
    email: null,
    awards: [
      {
        awardName: "Academy Award for Best Actor",
        awardYear: 1994
      }
    ]
  },
  {
    _id: ObjectId(),
    firstName: "Scarlett",
    lastName: "Johansson",
    dateOfBirth: ISODate("1984-11-22"),
    nationality: "American",
    biography: "Versatile actress and singer",
    email: null,
    awards: [
      {
        awardName: "BAFTA Award for Best Actress",
        awardYear: 2020
      }
    ]
  },
  {
    _id: ObjectId(),
    firstName: "Benedict",
    lastName: "Cumberbatch",
    dateOfBirth: ISODate("1976-07-19"),
    nationality: "British",
    biography: "Known for playing Sherlock Holmes",
    email: null,
    awards: [
      {
        awardName: "Emmy Award for Outstanding Lead Actor",
        awardYear: 2014
      }
    ]
  }
])

// 3. Studios Collection
// Drop if exists
db.studios.drop()

// Create studios collection and insert data
db.studios.insertMany([
  {
    _id: ObjectId(),
    studioName: "Pixar",
    country: "USA",
    foundationYear: 1979,
    active: true,
    headquarters: {
      city: "Emeryville",
      state: "California",
      country: "USA"
    }
  },
  {
    _id: ObjectId(),
    studioName: "Studio Ghibli",
    country: "Japan",
    foundationYear: 1985,
    active: true,
    headquarters: {
      city: "Koganei",
      state: "Tokyo",
      country: "Japan"
    }
  },
  {
    _id: ObjectId(),
    studioName: "Marvel Studios",
    country: "USA",
    foundationYear: 1993,
    active: true,
    headquarters: {
      city: "Burbank",
      state: "California",
      country: "USA"
    }
  }
])

// Store studio IDs for reference
let pixarId = db.studios.findOne({ studioName: "Pixar" })._id;
let ghibliId = db.studios.findOne({ studioName: "Studio Ghibli" })._id;
let marvelId = db.studios.findOne({ studioName: "Marvel Studios" })._id;

// 4. Directors Collection
// Drop if exists
db.directors.drop()

// Create directors collection and insert data
db.directors.insertMany([
  {
    _id: ObjectId(),
    directorName: "John Lasseter",
    nationality: "American",
    birthDate: ISODate("1957-01-12"),
    specialization: ["Animation", "Family Films"],
    activeYears: {
      start: 1978,
      end: null
    }
  },
  {
    _id: ObjectId(),
    directorName: "Hayao Miyazaki",
    nationality: "Japanese",
    birthDate: ISODate("1941-01-05"),
    specialization: ["Animation", "Fantasy"],
    activeYears: {
      start: 1963,
      end: null
    }
  },
  {
    _id: ObjectId(),
    directorName: "Jon Favreau",
    nationality: "American",
    birthDate: ISODate("1966-10-19"),
    specialization: ["Action", "Adventure"],
    activeYears: {
      start: 1996,
      end: null
    }
  }
])

// Store director IDs for reference
let lasseterId = db.directors.findOne({ directorName: "John Lasseter" })._id;
let miyazakiId = db.directors.findOne({ directorName: "Hayao Miyazaki" })._id;
let favreauId = db.directors.findOne({ directorName: "Jon Favreau" })._id;

// 5. Genres Collection
// Drop if exists
db.genres.drop()

// Create genres collection and insert data
db.genres.insertMany([
  {
    _id: ObjectId(),
    genreName: "Animation",
    description: "Animated films and series",
    popularityRank: 1,
    ageGroup: "All",
    moods: [
      {
        moodId: ObjectId(),
        moodName: "Happy",
        intensity: 0.8
      },
      {
        moodId: ObjectId(),
        moodName: "Excited",
        intensity: 0.7
      }
    ],
    targetAudience: ["Children", "Family"],
    commonThemes: ["Adventure", "Coming of Age", "Friendship"]
  },
  {
    _id: ObjectId(),
    genreName: "Science Fiction",
    description: "Films set in imaginary future",
    popularityRank: 2,
    ageGroup: "Teens",
    moods: [
      {
        moodId: ObjectId(),
        moodName: "Excited",
        intensity: 0.9
      },
      {
        moodId: ObjectId(),
        moodName: "Thoughtful",
        intensity: 0.6
      }
    ],
    targetAudience: ["Teens", "Young Adults"],
    commonThemes: ["Technology", "Future", "Space"]
  },
  {
    _id: ObjectId(),
    genreName: "Drama",
    description: "Character development and emotional themes",
    popularityRank: 3,
    ageGroup: "Adults",
    moods: [
      {
        moodId: ObjectId(),
        moodName: "Thoughtful",
        intensity: 0.9
      },
      {
        moodId: ObjectId(),
        moodName: "Sad",
        intensity: 0.7
      }
    ],
    targetAudience: ["Adults"],
    commonThemes: ["Relationships", "Personal Growth", "Conflict"]
  }
])

// Store genre IDs for reference
let animationId = db.genres.findOne({ genreName: "Animation" })._id;
let sciFiId = db.genres.findOne({ genreName: "Science Fiction" })._id;
let dramaId = db.genres.findOne({ genreName: "Drama" })._id;

// 6. Films Collection
// Drop if exists
db.films.drop()

// Create films collection and insert data
db.films.insertMany([
  {
    _id: ObjectId(),
    studioId: pixarId,
    isSeries: false,
    title: "Toy Story",
    releaseYear: 1995,
    duration: 81,
    description: "A story of toys that come to life",
    ageRating: "G",
    viewCount: 1000000,
    createdAt: ISODate("2024-10-15T12:52:56Z"),
    directors: [
      {
        directorId: lasseterId,
        directorName: "John Lasseter"
      }
    ],
    genres: [
      {
        genreId: animationId,
        genreName: "Animation"
      }
    ],
    cast: [
      {
        actorId: db.actors.findOne({ firstName: "Tom" })._id,
        characterName: "Woody",
        role: "Lead",
        screenTime: 45  // minutes
      }
    ],
    technicalSpecs: {
      resolution: "4K",
      audioFormats: ["Dolby Digital", "DTS"],
      subtitleLanguages: ["English", "Spanish", "French"]
    },
    ratings: {
      imdb: 8.3,
      rottenTomatoes: 92,
      internal: 4.5
    },
    streamingQuality: ["SD", "HD", "4K"],
    availability: {
      regions: ["North America", "Europe", "Asia"],
      restrictions: []
    }
  },
  {
    _id: ObjectId(),
    studioId: marvelId,
    isSeries: false,
    title: "Iron Man",
    releaseYear: 2008,
    duration: 126,
    description: "The story of Tony Stark becoming Iron Man",
    ageRating: "PG-13",
    viewCount: 1500000,
    createdAt: ISODate("2024-10-15T12:52:56Z"),
    directors: [
      {
        directorId: favreauId,
        directorName: "Jon Favreau"
      }
    ],
    genres: [
      {
        genreId: sciFiId,
        genreName: "Science Fiction"
      }
    ],
    cast: [
      {
        actorId: db.actors.findOne({ firstName: "Scarlett" })._id,
        characterName: "Black Widow",
        role: "Supporting",
        screenTime: 30  // minutes
      }
    ],
    technicalSpecs: {
      resolution: "4K",
      audioFormats: ["Dolby Atmos", "DTS-X"],
      subtitleLanguages: ["English", "Spanish", "French", "German"]
    },
    ratings: {
      imdb: 7.9,
      rottenTomatoes: 94,
      internal: 4.3
    },
    streamingQuality: ["HD", "4K", "HDR"],
    availability: {
      regions: ["Global"],
      restrictions: ["Some scenes edited in certain regions"]
    }
  }
])

// Store film IDs for reference
let toyStoryId = db.films.findOne({ title: "Toy Story" })._id;
let ironManId = db.films.findOne({ title: "Iron Man" })._id;

// 7. Episodes Collection (For Series)
// Create episodes collection and insert data for series
db.films.updateOne(
  { title: "Sherlock" },
  {
    $set: {
      episodes: [
        {
          episodeId: ObjectId(),
          episodeNumber: 1,
          seasonNumber: 1,
          title: "A Study in Pink",
          duration: 88,
          releaseDate: ISODate("2010-07-25"),
          synopsis: "A woman in pink is the latest victim in a series of seemingly impossible suicides.",
          viewCount: 500000,
          cast: [
            {
              actorId: db.actors.findOne({ firstName: "Benedict" })._id,
              characterName: "Sherlock Holmes",
              screenTime: 75
            }
          ],
          ratings: {
            imdb: 8.8,
            internal: 4.7
          }
        },
        {
          episodeId: ObjectId(),
          episodeNumber: 2,
          seasonNumber: 1,
          title: "The Blind Banker",
          duration: 89,
          releaseDate: ISODate("2010-08-01"),
          synopsis: "Mysterious symbols and murders are discovered across London.",
          viewCount: 480000,
          cast: [
            {
              actorId: db.actors.findOne({ firstName: "Benedict" })._id,
              characterName: "Sherlock Holmes",
              screenTime: 80
            }
          ],
          ratings: {
            imdb: 8.5,
            internal: 4.5
          }
        }
      ]
    }
  }
)

// 8. Reviews Collection
// Drop if exists
db.reviews.drop()

// Create reviews collection and insert data
db.reviews.insertMany([
  {
    _id: ObjectId(),
    userId: db.users.findOne({ username: "john_doe" })._id,
    filmId: toyStoryId,
    rating: 9,
    commentText: "A classic animation that never gets old",
    datePosted: ISODate("2024-10-15T13:04:21Z"),
    likeCount: 0,
    isEdited: false,
    watchedComplete: true,
    sentiment: {
      positive: 0.9,
      negative: 0.1,
      neutral: 0.0
    },
    tags: ["nostalgic", "family-friendly", "innovative"],
    userPlatform: {
      device: "mobile",
      os: "iOS",
      appVersion: "2.1.0"
    }
  },
  {
    _id: ObjectId(),
    userId: db.users.findOne({ username: "jane_smith" })._id,
    filmId: ironManId,
    rating: 8,
    commentText: "Great start to the Marvel Cinematic Universe",
    datePosted: ISODate("2024-10-15T13:04:21Z"),
    likeCount: 0,
    isEdited: false,
    watchedComplete: true,
    sentiment: {
      positive: 0.8,
      negative: 0.1,
      neutral: 0.1
    },
    tags: ["action-packed", "superhero", "origin-story"],
    userPlatform: {
      device: "desktop",
      os: "Windows",
      appVersion: "2.1.0"
    }
  }
])

// 9. Watch History Collection
// Drop if exists
db.watchHistory.drop()

// Create watch history collection and insert data
db.watchHistory.insertMany([
  {
    _id: ObjectId(),
    userId: db.users.findOne({ username: "john_doe" })._id,
    contentType: "FILM",
    film: {
      filmId: toyStoryId,
      title: "Toy Story"
    },
    episode: null,
    watchDate: ISODate("2023-05-15"),
    watchDuration: 81,
    watchProgress: 100,
    lastWatchedPosition: 81,
    watchSession: {
      startTime: ISODate("2023-05-15T14:00:00Z"),
      endTime: ISODate("2023-05-15T15:21:00Z"),
      pauseCount: 2,
      bufferingEvents: 1,
      quality: "HD",
      device: {
        type: "smart_tv",
        model: "Samsung TV",
        osVersion: "Tizen 4.0"
      },
      network: {
        type: "wifi",
        speed: "50mbps"
      }
    },
    userInteractions: {
      rewinds: 1,
      forwards: 0,
      pauses: 2,
      qualityChanges: 0
    }
  },
  {
    _id: ObjectId(),
    userId: db.users.findOne({ username: "jane_smith" })._id,
    contentType: "FILM",
    film: {
      filmId: ironManId,
      title: "Iron Man"
    },
    episode: null,
    watchDate: ISODate("2023-05-16"),
    watchDuration: 126,
    watchProgress: 100,
    lastWatchedPosition: 126,
    watchSession: {
      startTime: ISODate("2023-05-16T20:00:00Z"),
      endTime: ISODate("2023-05-16T22:06:00Z"),
      pauseCount: 1,
      bufferingEvents: 0,
      quality: "4K",
      device: {
        type: "mobile",
        model: "iPhone 13",
        osVersion: "iOS 15.0"
      },
      network: {
        type: "5G",
        speed: "100mbps"
      }
    },
    userInteractions: {
      rewinds: 0,
      forwards: 1,
      pauses: 1,
      qualityChanges: 1
    }
  }
])

// 10. Watchlist Collection
// Drop if exists
db.watchlist.drop()

// Create watchlist collection and insert data
db.watchlist.insertMany([
  {
    _id: ObjectId(),
    userId: db.users.findOne({ username: "john_doe" })._id,
    films: [
      {
        filmId: ironManId,
        dateAdded: ISODate("2023-06-01"),
        priority: 1,
        notes: "Recommended by friend",
        addedFrom: "friend_recommendation",
        plannedWatchDate: ISODate("2023-06-15"),
        reminders: {
          enabled: true,
          frequency: "weekly"
        }
      }
    ],
    lastUpdated: ISODate("2023-06-01"),
    sortPreference: "priority",
    notificationSettings: {
      emailNotifications: true,
      pushNotifications: true,
      reminderDays: [1, 3] // Days before planned watch date
    }
  },
  {
    _id: ObjectId(),
    userId: db.users.findOne({ username: "jane_smith" })._id,
    films: [
      {
        filmId: toyStoryId,
        dateAdded: ISODate("2023-06-02"),
        priority: 2,
        notes: "Classic animation",
        addedFrom: "platform_recommendation",
        plannedWatchDate: ISODate("2023-06-20"),
        reminders: {
          enabled: false,
          frequency: null
        }
      }
    ],
    lastUpdated: ISODate("2023-06-02"),
    sortPreference: "dateAdded",
    notificationSettings: {
      emailNotifications: false,
      pushNotifications: true,
      reminderDays: [2] // Days before planned watch date
    }
  }
])

// 11. Analytics Collection
// Drop if exists
db.analytics.drop()

// Create analytics collection and insert data
db.analytics.insertMany([
  {
    _id: ObjectId(),
    filmId: toyStoryId,
    period: "2024-Q1",
    dailyStats: [
      {
        date: ISODate("2024-01-01"),
        viewCount: 1000,
        uniqueViewers: 950,
        averageWatchDuration: 75,
        completionRate: 0.92,
        peakViewingHours: {
          start: 20, // 8 PM
          end: 22    // 10 PM
        },
        deviceDistribution: {
          mobile: 0.3,
          tablet: 0.1,
          desktop: 0.2,
          smart_tv: 0.4
        },
        qualityDistribution: {
          "4K": 0.4,
          "HD": 0.5,
          "SD": 0.1
        }
      }
    ],
    demographicData: {
      ageGroups: {
        "0-12": 0.3,
        "13-17": 0.15,
        "18-24": 0.25,
        "25-34": 0.2,
        "35+": 0.1
      },
      genderDistribution: {
        male: 0.48,
        female: 0.51,
        other: 0.01
      },
      topRegions: [
        {
          region: "North America",
          viewershipShare: 0.45
        },
        {
          region: "Europe",
          viewershipShare: 0.30
        }
      ]
    },
    engagement: {
      averageRating: 4.5,
      reviewCount: 1500,
      shareCount: 500,
      addedToWatchlist: 2000,
      socialMediaMentions: {
        twitter: 1200,
        facebook: 800,
        instagram: 1500
      }
    },
    technicalMetrics: {
      averageBufferingTime: 0.8,
      streamingErrors: 25,
      averageBitrate: "8mbps",
      cdnPerformance: {
        latency: 45,
        errorRate: 0.002
      }
    }
  }
])

// 12. Creating Indexes for Optimization

// Users Collection Indexes
db.users.createIndex({ "username": 1 }, { unique: true })
db.users.createIndex({ "email": 1 }, { unique: true })
db.users.createIndex({ "subscription.status": 1 })
db.users.createIndex({ "subscription.endDate": 1 })
db.users.createIndex({ 
    "fullName": "text",
    "email": "text" 
})

// Films Collection Indexes
db.films.createIndex({ "title": "text", "description": "text" })
db.films.createIndex({ "releaseYear": -1 })
db.films.createIndex({ "viewCount": -1 })
db.films.createIndex({ "genres.genreId": 1 })
db.films.createIndex({ "studioId": 1 })
db.films.createIndex({ "ageRating": 1 })
db.films.createIndex({ 
    "releaseYear": -1, 
    "viewCount": -1 
})

// Watch History Collection Indexes
db.watchHistory.createIndex({ "userId": 1 })
db.watchHistory.createIndex({ "film.filmId": 1 })
db.watchHistory.createIndex({ "watchDate": -1 })
db.watchHistory.createIndex({ 
    "userId": 1, 
    "watchDate": -1 
})

// Reviews Collection Indexes
db.reviews.createIndex({ "userId": 1, "filmId": 1 }, { unique: true })
db.reviews.createIndex({ "datePosted": -1 })
db.reviews.createIndex({ "rating": -1 })
db.reviews.createIndex({ "likeCount": -1 })
db.reviews.createIndex({ "tags": 1 })

// Analytics Collection Indexes
db.analytics.createIndex({ "filmId": 1 })
db.analytics.createIndex({ "period": 1 })
db.analytics.createIndex({ "dailyStats.date": 1 })

// 13. Example Queries for Data Retrieval

// Find Popular Films
const getPopularFilms = () => {
    return db.films.find(
        { viewCount: { $gt: 1000000 } },
        { 
            title: 1,
            viewCount: 1,
            releaseYear: 1,
            rating: 1,
            genres: 1
        }
    ).sort({ viewCount: -1 }).limit(10);
}

// Get User Watch History with Film Details
const getUserWatchHistory = (username) => {
    const user = db.users.findOne({ username: username });
    return db.watchHistory.aggregate([
        {
            $match: { userId: user._id }
        },
        {
            $lookup: {
                from: "films",
                localField: "film.filmId",
                foreignField: "_id",
                as: "filmDetails"
            }
        },
        {
            $project: {
                watchDate: 1,
                watchDuration: 1,
                watchProgress: 1,
                filmTitle: { $arrayElemAt: ["$filmDetails.title", 0] },
                filmGenres: { $arrayElemAt: ["$filmDetails.genres", 0] }
            }
        },
        {
            $sort: { watchDate: -1 }
        }
    ]);
}

// Get Film Recommendations Based on User Preferences
const getFilmRecommendations = (username) => {
    const user = db.users.findOne({ username: username });
    return db.films.aggregate([
        {
            $match: {
                _id: { 
                    $nin: db.watchHistory
                        .find({ userId: user._id })
                        .map(h => h.film.filmId) 
                }
            }
        },
        {
            $lookup: {
                from: "genres",
                localField: "genres.genreId",
                foreignField: "_id",
                as: "genreDetails"
            }
        },
        {
            $match: {
                "genreDetails._id": {
                    $in: user.preferences.map(p => p.genreId)
                }
            }
        },
        {
            $project: {
                title: 1,
                releaseYear: 1,
                genres: 1,
                score: {
                    $avg: [
                        "$ratings.imdb",
                        { $multiply: ["$ratings.internal", 2] }
                    ]
                }
            }
        },
        {
            $sort: { score: -1 }
        },
        {
            $limit: 10
        }
    ]);
}

// Get Analytics for a Specific Film
const getFilmAnalytics = (filmTitle) => {
    const film = db.films.findOne({ title: filmTitle });
    return db.analytics.aggregate([
        {
            $match: { filmId: film._id }
        },
        {
            $unwind: "$dailyStats"
        },
        {
            $group: {
                _id: null,
                totalViews: { $sum: "$dailyStats.viewCount" },
                avgWatchDuration: { $avg: "$dailyStats.averageWatchDuration" },
                avgCompletionRate: { $avg: "$dailyStats.completionRate" },
                deviceDistribution: { $last: "$dailyStats.deviceDistribution" },
                demographicData: { $last: "$demographicData" }
            }
        },
        {
            $project: {
                _id: 0,
                totalViews: 1,
                avgWatchDuration: { $round: ["$avgWatchDuration", 2] },
                avgCompletionRate: { $round: ["$avgCompletionRate", 2] },
                deviceDistribution: 1,
                demographicData: 1
            }
        }
    ]);
}

// Get Genre Performance Analysis
const getGenrePerformance = () => {
    return db.films.aggregate([
        {
            $unwind: "$genres"
        },
        {
            $group: {
                _id: "$genres.genreId",
                totalFilms: { $sum: 1 },
                avgViewCount: { $avg: "$viewCount" },
                totalViews: { $sum: "$viewCount" }
            }
        },
        {
            $lookup: {
                from: "genres",
                localField: "_id",
                foreignField: "_id",
                as: "genreInfo"
            }
        },
        {
            $project: {
                genreName: { $arrayElemAt: ["$genreInfo.genreName", 0] },
                totalFilms: 1,
                avgViewCount: { $round: ["$avgViewCount", 0] },
                totalViews: 1
            }
        },
        {
            $sort: { totalViews: -1 }
        }
    ]);
}

// Get User Engagement Metrics
const getUserEngagement = (username) => {
    const user = db.users.findOne({ username: username });
    return db.watchHistory.aggregate([
        {
            $match: { userId: user._id }
        },
        {
            $group: {
                _id: null,
                totalWatchTime: { $sum: "$watchDuration" },
                uniqueFilms: { $addToSet: "$film.filmId" },
                averageProgress: { $avg: "$watchProgress" },
                sessionMetrics: {
                    $push: {
                        date: "$watchDate",
                        duration: "$watchDuration",
                        interactions: "$userInteractions"
                    }
                }
            }
        },
        {
            $project: {
                _id: 0,
                totalWatchTime: 1,
                uniqueFilmsCount: { $size: "$uniqueFilms" },
                averageProgress: { $round: ["$averageProgress", 2] },
                lastNSessions: {
                    $slice: ["$sessionMetrics", -5]
                }
            }
        }
    ]);
}

// Example Usage:
// getPopularFilms()
// getUserWatchHistory("john_doe")
// getFilmRecommendations("jane_smith")
// getFilmAnalytics("Toy Story")
// getGenrePerformance()
// getUserEngagement("john_doe")

// 14. Maintenance Scripts and Utilities

// Cleanup inactive users
const cleanupInactiveUsers = () => {
    const threeMonthsAgo = new Date();
    threeMonthsAgo.setMonth(threeMonthsAgo.getMonth() - 3);

    return db.users.updateMany(
        {
            "subscription.status": "expired",
            "subscription.endDate": { $lt: threeMonthsAgo }
        },
        {
            $set: {
                "status": "inactive",
                "lastUpdated": new Date()
            }
        }
    );
}

// Archive old watch history
const archiveOldWatchHistory = () => {
    const sixMonthsAgo = new Date();
    sixMonthsAgo.setMonth(sixMonthsAgo.getMonth() - 6);

    return db.watchHistory.aggregate([
        {
            $match: {
                watchDate: { $lt: sixMonthsAgo }
            }
        },
        {
            $out: "watchHistory_archive"
        }
    ]).forEach(doc => {
        db.watchHistory.deleteOne({ _id: doc._id });
    });
}

// Update film ratings based on reviews
const updateFilmRatings = () => {
    return db.reviews.aggregate([
        {
            $group: {
                _id: "$filmId",
                averageRating: { $avg: "$rating" },
                totalReviews: { $sum: 1 }
            }
        }
    ]).forEach(result => {
        db.films.updateOne(
            { _id: result._id },
            {
                $set: {
                    "ratings.internal": result.averageRating,
                    "totalReviews": result.totalReviews,
                    "lastRatingUpdate": new Date()
                }
            }
        );
    });
}

// Generate content recommendations
const generateRecommendations = () => {
    return db.users.find({}).forEach(user => {
        // Get user's favorite genres
        const watchHistory = db.watchHistory.aggregate([
            {
                $match: { userId: user._id }
            },
            {
                $lookup: {
                    from: "films",
                    localField: "film.filmId",
                    foreignField: "_id",
                    as: "filmDetails"
                }
            },
            {
                $unwind: "$filmDetails"
            },
            {
                $unwind: "$filmDetails.genres"
            },
            {
                $group: {
                    _id: "$filmDetails.genres.genreId",
                    count: { $sum: 1 }
                }
            },
            {
                $sort: { count: -1 }
            },
            {
                $limit: 3
            }
        ]).toArray();

        // Find recommended films
        const recommendedFilms = db.films.find({
            "genres.genreId": { $in: watchHistory.map(g => g._id) },
            "_id": {
                $nin: db.watchHistory
                    .find({ userId: user._id })
                    .map(h => h.film.filmId)
            }
        }).limit(10).toArray();

        // Store recommendations
        db.userRecommendations.updateOne(
            { userId: user._id },
            {
                $set: {
                    recommendations: recommendedFilms.map(film => ({
                        filmId: film._id,
                        title: film.title,
                        matchScore: calculateMatchScore(film, watchHistory),
                        generatedAt: new Date()
                    }))
                }
            },
            { upsert: true }
        );
    });
}

// Calculate match score for recommendations
const calculateMatchScore = (film, userGenres) => {
    let score = 0;
    film.genres.forEach(genre => {
        const userGenre = userGenres.find(g => g._id.equals(genre.genreId));
        if (userGenre) {
            score += (userGenre.count / userGenres[0].count);
        }
    });
    return Math.round(score * 100) / 100;
}

// Data validation and repair
const validateAndRepairData = () => {
    // Check for orphaned reviews
    db.reviews.find().forEach(review => {
        const film = db.films.findOne({ _id: review.filmId });
        const user = db.users.findOne({ _id: review.userId });
        
        if (!film || !user) {
            db.reviews.deleteOne({ _id: review._id });
        }
    });

    // Update missing film durations from episodes
    db.films.find({ isSeries: true }).forEach(film => {
        if (film.episodes && film.episodes.length > 0) {
            const totalDuration = film.episodes.reduce((sum, ep) => sum + (ep.duration || 0), 0);
            db.films.updateOne(
                { _id: film._id },
                { $set: { totalDuration: totalDuration } }
            );
        }
    });

    // Fix inconsistent dates
    db.watchHistory.find().forEach(history => {
        if (history.watchDate > new Date()) {
            db.watchHistory.updateOne(
                { _id: history._id },
                { $set: { watchDate: new Date() } }
            );
        }
    });
}

// Analytics Utilities
const generateAnalyticsReport = (startDate, endDate) => {
    return db.analytics.aggregate([
        {
            $match: {
                "dailyStats.date": {
                    $gte: startDate,
                    $lte: endDate
                }
            }
        },
        {
            $unwind: "$dailyStats"
        },
        {
            $match: {
                "dailyStats.date": {
                    $gte: startDate,
                    $lte: endDate
                }
            }
        },
        {
            $group: {
                _id: "$filmId",
                totalViews: { $sum: "$dailyStats.viewCount" },
                avgCompletionRate: { $avg: "$dailyStats.completionRate" },
                deviceStats: {
                    $push: "$dailyStats.deviceDistribution"
                }
            }
        },
        {
            $lookup: {
                from: "films",
                localField: "_id",
                foreignField: "_id",
                as: "filmInfo"
            }
        },
        {
            $project: {
                title: { $arrayElemAt: ["$filmInfo.title", 0] },
                totalViews: 1,
                avgCompletionRate: { $round: ["$avgCompletionRate", 2] },
                deviceDistribution: {
                    $reduce: {
                        input: "$deviceStats",
                        initialValue: {
                            mobile: 0,
                            tablet: 0,
                            desktop: 0,
                            smart_tv: 0
                        },
                        in: {
                            mobile: { $add: ["$$value.mobile", "$$this.mobile"] },
                            tablet: { $add: ["$$value.tablet", "$$this.tablet"] },
                            desktop: { $add: ["$$value.desktop", "$$this.desktop"] },
                            smart_tv: { $add: ["$$value.smart_tv", "$$this.smart_tv"] }
                        }
                    }
                }
            }
        },
        {
            $sort: { totalViews: -1 }
        }
    ]);
}

// Schedule maintenance tasks (example using MongoDB change streams)
const watchForChanges = () => {
    const changeStream = db.films.watch();
    
    changeStream.on('change', next => {
        if (next.operationType === 'insert') {
            // Create initial analytics document
            db.analytics.insertOne({
                filmId: next.fullDocument._id,
                period: new Date().toISOString().slice(0, 7), // YYYY-MM
                dailyStats: []
            });
        }
        
        if (next.operationType === 'update') {
            // Update search indexes if necessary
            if (next.updateDescription.updatedFields.title || 
                next.updateDescription.updatedFields.description) {
                db.films.updateOne(
                    { _id: next.documentKey._id },
                    { $set: { lastIndexUpdate: new Date() } }
                );
            }
        }
    });
}

// Example usage:
// cleanupInactiveUsers()
// archiveOldWatchHistory()
// updateFilmRatings()
// generateRecommendations()
// validateAndRepairData()
// generateAnalyticsReport(new Date('2024-01-01'), new Date('2024-12-31'))
// watchForChanges()
